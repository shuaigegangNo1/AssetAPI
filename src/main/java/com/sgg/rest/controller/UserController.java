package com.sgg.rest.controller;


import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

//curl -i -H "Content-Type: application/json" -X POST -d '{
//    "name": "hxw",
//    "password": "520"
//}' http://localhost:8080/login
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.sgg.rest.model.ApplicationUser;
import com.sgg.rest.model.UserQuery;
import com.sgg.rest.repository.UserPageRepository;
import com.sgg.rest.repository.UserRepository;
import com.sgg.rest.service.UserService;

@RestController
@RequestMapping("/user") // This means URL's start with /user (after Application path)
//@SuppressWarnings("all")
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
//	@Autowired
//	private UserService userService;
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	@Autowired
	private UserPageRepository userPageRepository;
	@Autowired  
    UserService userService;  
	//curl 'localhost:8080/user/add?name=First&email=someemail@someemailprovider.com'	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		ApplicationUser n = new ApplicationUser();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	private HttpServletResponse reponse;
//curl -H "Authorization: Bearer xxx.yyy.zzz" localhost:8080/user/all （带 token认证）
	// curl localhost:8080/user/all
	@GetMapping(path="/userlist")
//	public Iterable<ApplicationUser> getAllUsers() {
//		// This returns a JSON or XML with the users
////		return userRepository.findAll();
//		return userRepository.findallAccounts();
//	}
	public ResponseEntity<Map<String,Object>> getAllUsers() {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("userList",userRepository.findallAccounts() );
		return new ResponseEntity<Map<String,Object>>(map,HttpStatus.OK);
	}

	// curl 'localhost:8080/user/delete?name=First'
//	@GetMapping(path="/delete")
//	public String deleteUserByName(@RequestParam String name) {
//		userRepository.deleteByName(name);
//		return "Deleted";
//	}
	//curl 'localhost:8080/user/update?id=2'
	@GetMapping(path="/update")
	public String update(@RequestParam int id) {
		ApplicationUser sessionUser = userRepository.findOne(id);
		sessionUser.setName("syg");
		sessionUser.setEmail("sgg@syg.com");
		userRepository.save(sessionUser);
		return "Updated";
	}
	//curl 'localhost:8080/user/findById?id=2'
//	@GetMapping(path="/findById")
//	public ApplicationUser getUserById(@RequestParam int id) {
////	    User u = userRepository.findOne(id);
////	    if(u == null) {
////	        return null;
////	    }
//	
//	    return userService.findOne(id);
//	}
	@RequestMapping(value="/sign-up", method=RequestMethod.POST)
	public ResponseEntity<Map<String,Object>>  getNewUser( @RequestBody ApplicationUser u) {
		Map<String,Object> map = new HashMap<String,Object>();
		ApplicationUser f_user = userRepository.findByName(u.getName());
		if (f_user!=null) {
			map.put("result", "user sign up failed,user exists");
		return new ResponseEntity<Map<String,Object>>(map,HttpStatus.OK);
		}
		u.setPassword(bCryptPasswordEncoder.encode(u.getPassword()));
		userRepository.save(u);
		map.put("result", "user sign up success");
		return new ResponseEntity<Map<String,Object>>(map,HttpStatus.OK);
	}
	@RequestMapping(value = "page", method=RequestMethod.GET)
	public Page<ApplicationUser> getEntryByPageable(@PageableDefault(value = 15, sort = { "id" }) @RequestParam int num ,
	    Pageable pageable) {
//		Integer page=1;
		Integer size=5;
		 Sort sort = new Sort(Direction.DESC, "id");
		 pageable = new PageRequest(num, size, sort);
//		 pageable = new PageRe
	    return userPageRepository.findAll(pageable);
	}
    @RequestMapping(value = "page1", method=RequestMethod.GET)
    public Page<ApplicationUser> getEntryByPageable(@PageableDefault(value = 15, sort = { "id" }, direction = Sort.Direction.DESC) 
        Pageable pageable, @RequestParam(value = "role", defaultValue = "") String name) {
//        if("".equals(name)){
            return userPageRepository.findAll(pageable);
//        }
//        return userPageRepository.findByStudent(name, pageable);
    }
    @RequestMapping(value = "userQuery",method = RequestMethod.POST)  
    public Page<ApplicationUser> findUserQuery(@RequestBody UserQuery userQuery){  
    	int page =0; //页码
    	int 	size =10; //页面大小
        Page<ApplicationUser> datas = userService.findUserCriteria(page, size,userQuery);  
        return datas;  
    }
	@RequestMapping(value="/updateUser", method=RequestMethod.POST)
	public ResponseEntity<Map<String,Object>> UpdateUser(@RequestBody ApplicationUser u) {
		Map<String,Object> map = new HashMap<String,Object>();
		ApplicationUser f_user = userRepository.findOne(u.getId());
		f_user.setEmail(u.getEmail());
		f_user.setName(u.getName());
		userRepository.save(f_user);
		map.put("result", "update success");
		return new ResponseEntity<Map<String,Object>>(map,HttpStatus.OK);
	}
	@RequestMapping(value="/delete", method=RequestMethod.GET)
	public ResponseEntity<Map<String,Object>> DeleteUser(@RequestParam int id) {
		Map<String,Object> map = new HashMap<String,Object>();
		userRepository.delete(id);
		map.put("result", "delete success");
		return new ResponseEntity<Map<String,Object>>(map,HttpStatus.OK);
	}
    @RequestMapping(value = "list",method = RequestMethod.GET)  
    public  ResponseEntity<Map<String,Object>> getUserList(@RequestParam Integer page){  
    		Map<String,Object> map = new HashMap<String,Object>();
	    Integer	size =10; //页面大小
        Page<ApplicationUser> paginationUser = userService.findUserNoCriteria(page, size);
        map.put("result", paginationUser);
        return new ResponseEntity<Map<String,Object>>(map,HttpStatus.OK);  
    }
    @RequestMapping(value = "querylist",method = RequestMethod.POST)  
    public  ResponseEntity<Map<String,Object>> getUserQueryList(@RequestParam Integer page, @RequestBody UserQuery userQuery){  
    		Map<String,Object> map = new HashMap<String,Object>();
	    Integer	size =10; //页面大小
        Page<ApplicationUser> paginationUser = userService.findUserCriteria(page, size, userQuery);
        map.put("result", paginationUser);
        return new ResponseEntity<Map<String,Object>>(map,HttpStatus.OK);  
    }
}
